#!/usr/bin/env python

# Script for the IUS project to create GitHub releases that correspond to when
# RPM packages are published to the testing and stable repositories.


import datetime
import pathlib

import click
import kitovu


default_timestamp = datetime.date.isoformat(datetime.date.today())
default_package = pathlib.Path.cwd().name


@click.group()
@click.pass_context
def cli(ctx):
    '''Release management tool.'''
    ctx.obj = kitovu.Api(profile='public')


@click.command()
@click.pass_obj
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-d', '--debug', is_flag=True)
def list(api, package, organization, debug):
    '''List releases for a package.'''
    try:
        # GET /repos/:owner/:repo/releases
        uri = f"/repos/{organization}/{package}/releases"
        if debug:
            click.echo(f"GET {uri}")
        releases = api.get(uri).json()[0:3]
        for release in releases:
            status = 'testing' if release['prerelease'] else 'stable'
            click.echo(f"{release['tag_name']} {status}")
    except Exception:
        if debug:
            raise
        else:
            raise SystemExit(f"unable to get releases for \"{package}\" package")


@click.command()
@click.pass_obj
@click.argument('tag')
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-d', '--debug', is_flag=True)
def show(api, tag, package, organization, debug):
    '''Display details for a release.'''
    try:
        # GET /repos/:owner/:repo/releases/tags/:tag
        uri = f"/repos/{organization}/{package}/releases/tags/{tag}"
        if debug:
            click.echo(f"GET {uri}")
        data = api.get(uri).json()
        click.echo(f"name: {data['tag_name']}")
        click.echo(f"prerelease: {data['prerelease']}")
        click.echo(data['body'])
    except Exception:
        if debug:
            raise
        else:
            raise SystemExit(f"unable to get release \"{tag}\" for \"{package}\" package")


@click.command()
@click.pass_obj
@click.argument('tag')
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
@click.option('-d', '--debug', is_flag=True)
def testing(api, tag, package, organization, timestamp, debug):
    '''Create a testing release.'''
    try:
        # POST /repos/:owner/:repo/releases
        body = f"testing: {timestamp}"
        payload = {'tag_name': tag, 'name': tag, 'body': body, 'prerelease': True}
        uri = f"/repos/{organization}/{package}/releases"
        if debug:
            click.echo(f"POST {uri}")
            click.echo(payload)
        api.post(uri, json=payload)
    except Exception:
        if debug:
            raise
        else:
            raise SystemExit(f"unable to create release \"{tag}\" for \"{package}\" package")


@click.command()
@click.pass_obj
@click.argument('tag')
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
@click.option('-d', '--debug', is_flag=True)
def stable(api, tag, package, organization, timestamp, debug):
    '''Create a stable release.'''
    try:
        # get current testing release
        # GET /repos/:owner/:repo/releases/tags/:tag
        uri = f"/repos/{organization}/{package}/releases/tags/{tag}"
        if debug:
            click.echo(f"GET {uri}")
        data = api.get(uri).json()
        if not data['prerelease']:
            raise SystemExit('The latest release is already marked "stable".')
        old_body = data['body']
        old_id = data['id']
        # delete current testing release
        # DELETE /repos/:owner/:repo/releases/:id
        uri = f"/repos/{organization}/{package}/releases/{old_id}"
        if debug:
            click.echo(f"DELETE {uri}")
        api.delete(uri)
        # create new stable release
        # POST /repos/:owner/:repo/releases
        body = f"{old_body}\nstable: {timestamp}"
        payload = {'tag_name': tag, 'name': tag, 'body': body}
        uri = f"/repos/{organization}/{package}/releases"
        if debug:
            click.echo(f"POST {uri}")
            click.echo(payload)
        api.post(uri, payload)
    except Exception:
        if debug:
            raise
        else:
            raise SystemExit(f"unable to create release \"{tag}\" for \"{package}\" package")


cli.add_command(list)
cli.add_command(show)
cli.add_command(testing)
cli.add_command(stable)


if __name__ == '__main__':
    cli()


# vim: ft=python sw=4 ts=4 sts=4 et
