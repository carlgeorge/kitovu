#!/usr/bin/env python

# Script for the IUS project to create GitHub releases that correspond to when
# RPM packages are published to the testing and stable repositories.


import datetime
import pathlib

import click
import kitovu
import pathlib
import rpm


default_timestamp = datetime.date.isoformat(datetime.date.today())
default_package = pathlib.Path.cwd().name


@click.group()
@click.pass_context
def cli(ctx):
    '''Release management tool.'''
    ctx.obj = kitovu.Api(profile='public')


@click.command()
@click.pass_obj
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
def list(api, package, organization):
    '''List releases for a package.'''
    # GET /repos/:owner/:repo/releases
    uri = '/repos/{}/{}/releases'.format(organization, package)
    releases = api.get(uri).json()[0:3]
    for release in releases:
        status = 'testing' if release['prerelease'] else 'stable'
        click.echo('{} {}'.format(release['tag_name'], status))


@click.command()
@click.pass_obj
@click.argument('tag')
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
def show(api, tag, package, organization):
    '''Display details for a release.'''
    # GET /repos/:owner/:repo/releases/tags/:tag
    uri = '/repos/{}/{}/releases/tags/{}'.format(organization, package, tag)
    data = api.get(uri).json()
    click.echo('name: {}'.format(data['tag_name']))
    click.echo('prerelease: {}'.format(data['prerelease']))
    click.echo(data['body'])


@click.command()
@click.pass_obj
@click.argument('tag', required=False)
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
def testing(api, tag, package, organization, timestamp):
    '''Create a testing release.'''
    if not tag:
        rpm.addMacro('dist', '%{nil}')
        cwd = pathlib.Path.cwd()
        spec_files = [f for f in cwd.glob('**/*.spec') if f.name.startswith(cwd.name)]
        spec = rpm.spec(spec_files[0].as_posix())
        version = spec.sourceHeader[rpm.RPMTAG_VERSION].decode()
        release = spec.sourceHeader[rpm.RPMTAG_RELEASE].decode().replace('.ius', '')
        tag = '-'.join([version, release])
    # POST /repos/:owner/:repo/releases
    body = 'testing: {}'.format(timestamp)
    payload = {'tag_name': tag, 'name': tag, 'body': body, 'prerelease': True}
    uri = '/repos/{}/{}/releases'.format(organization, package)
    api.post(uri, json=payload)


@click.command()
@click.pass_obj
@click.argument('tag', required=False)
@click.option('-p', '--package', envvar='PKG', default=default_package)
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
def stable(api, tag, package, organization, timestamp):
    '''Create a stable release.'''
    if tag:
        # GET /repos/:owner/:repo/releases/tags/:tag
        uri = '/repos/{}/{}/releases/tags/{}'.format(organization, package, tag)
        data = api.get(uri).json()
        if not data['prerelease']:
            raise SystemExit('That release is already marked "stable".')
    else:
        # GET /repos/:owner/:repo/releases
        uri = '/repos/{}/{}/releases'.format(organization, package)
        data = api.get(uri).json()[0]
        tag = data['tag_name']
        if not data['prerelease']:
            raise SystemExit('The latest release is already marked "stable".')
    old_body = data['body']
    old_id = data['id']
    # delete current testing release
    # DELETE /repos/:owner/:repo/releases/:id
    uri = '/repos/{}/{}/releases/{}'.format(organization, package, old_id)
    api.delete(uri)
    # create new stable release
    # POST /repos/:owner/:repo/releases
    body = '{}\nstable: {}'.format(old_body.strip(), timestamp)
    payload = {'tag_name': tag, 'name': tag, 'body': body}
    uri = '/repos/{}/{}/releases'.format(organization, package)
    api.post(uri, payload)


cli.add_command(list)
cli.add_command(show)
cli.add_command(testing)
cli.add_command(stable)


if __name__ == '__main__':
    cli()


# vim: ft=python sw=4 ts=4 sts=4 et
