#!/usr/bin/env python

# Script for the IUS project to create GitHub releases that correspond to when
# RPM packages are published to the testing and stable repositories.


import datetime
import click
import kitovu


default_timestamp = datetime.date.isoformat(datetime.date.today())


@click.group()
@click.pass_context
def cli(ctx):
    try:
        ctx.obj = kitovu.Api(profile='public')
    except kitovu.errors.MissingConfigError:
        raise SystemExit('no profile "public" found')


@click.command()
@click.pass_obj
@click.argument('package')
@click.argument('tag')
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
@click.option('-d', '--debug', is_flag=True)
def testing(api, package, tag, organization, timestamp, debug):
    body = 'testing: {}'.format(timestamp)
    payload = {'tag_name': tag, 'name': tag, 'body': body, 'prerelease': True}
    uri = '/repos/{}/{}/releases'.format(organization, package)
    if debug:
        click.echo('creating new testing release')
        click.echo(uri)
        click.echo(payload)
    api.post(uri, payload)


@click.command()
@click.pass_obj
@click.argument('package')
@click.argument('tag')
@click.option('-o', '--organization', default='iuscommunity-pkg')
@click.option('-t', '--timestamp', default=default_timestamp)
@click.option('-d', '--debug', is_flag=True)
def stable(api, package, tag, organization, timestamp, debug):
    # get current testing release
    uri = '/repos/{}/{}/releases/tags/{}'.format(organization, package, tag)
    if debug:
        click.echo('getting current testing release')
    data = api.get(uri).json()
    old_body = data['body']
    old_id = data['id']
    # delete current testing release
    uri = '/repos/{}/{}/releases/{}'.format(organization, package, old_id)
    if debug:
        click.echo('deleting current testing release')
        click.echo(uri)
    api.delete(uri)
    # create new stable release
    body = '{}\nstable: {}'.format(old_body, timestamp)
    payload = {'tag_name': tag, 'name': tag, 'body': body}
    uri = '/repos/{}/{}/releases'.format(organization, package)
    if debug:
        click.echo('create new stable release')
        click.echo(uri)
        click.echo(payload)
    else:
        api.post(uri, payload)


cli.add_command(testing)
cli.add_command(stable)


if __name__ == '__main__':
    cli()


# vim: ft=python sw=4 ts=4 sts=4 et
